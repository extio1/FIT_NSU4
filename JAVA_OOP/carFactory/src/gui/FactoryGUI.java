package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import controller.FabricController;
import controller.Performer;
import factory.Publisher;
import factory.factoryData.FabricCondition;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.*;

/*
    Engine - PURPLE
    Body - GREEN
    Accessory - BLUE
    Dealer - YELLOW

    Ползунки:
    Скорость поставщика двигателей
    Скорость поставщика кузовов
    Скорость поставщика аксессуаров
    Скорость дилера
    
    Информация:
    Количество деталей на складе двигателей
    Количество деталей на складе кузовов
    Количество деталей на складе аксессуаров
    Количество деталей на складе автомобилей
    
    Общее количество деталей произведенных поставщиком двигателей
    Общее количество деталей произведенных поставщиком кузово
    Общее количество деталей произведенных поставщиком аккессуаров
    Общее количество произведенных машин
    
    Сколько задач для исполнения ждут в очереди для ThreadPool
*/

public class FactoryGUI extends JFrame implements Observer {
    private JPanel MainFrame;
    private JButton btnStart;
    private JButton btnStop;
    private JSlider sliderEngine;
    private JSlider sliderBody;
    private JSlider sliderAccessory;
    private JSlider sliderDealer;

    private JLabel storageEngine;
    private JLabel amountEngine;
    private JLabel storageBody;
    private JLabel amountBody;
    private JLabel storageAccessory;
    private JLabel amountAccessory;
    private JLabel storageCar;
    private JLabel amountCar;
    private JLabel carsInQueue;

    private final Publisher publisher;

    public FactoryGUI(FabricController controller, Publisher publisher) {
        $$$setupUI$$$();

        setContentPane(MainFrame);
        setTitle("Fabric");
        setSize(800, 400);
        setVisible(true);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

        this.publisher = publisher;

        btnStart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                controller.startFabric();
            }
        });
        btnStop.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                controller.closeFabric();
            }
        });

        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
            }

            @Override
            public void windowClosing(WindowEvent e) {
                dispose();
                controller.closeFabric();
            }

            @Override
            public void windowClosed(WindowEvent e) {
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });

        sliderAccessory.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                controller.changePeriodPerformer(Performer.accessoryProv, sliderAccessory.getValue());
            }
        });
        sliderBody.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                controller.changePeriodPerformer(Performer.bodyProv, sliderBody.getValue());
            }
        });
        sliderEngine.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                controller.changePeriodPerformer(Performer.engineProv, sliderEngine.getValue());
            }
        });
        sliderDealer.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                controller.changePeriodPerformer(Performer.dealer, sliderDealer.getValue());
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainFrame = new JPanel();
        MainFrame.setLayout(new GridLayoutManager(13, 4, new Insets(0, 0, 0, 0), -1, -1));
        btnStart = new JButton();
        btnStart.setText("Start");
        MainFrame.add(btnStart, new GridConstraints(12, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sliderAccessory = new JSlider();
        sliderAccessory.setForeground(new Color(-16748101));
        sliderAccessory.setMajorTickSpacing(500);
        sliderAccessory.setMaximum(2000);
        sliderAccessory.setMinorTickSpacing(100);
        sliderAccessory.setPaintLabels(true);
        sliderAccessory.setPaintTicks(true);
        sliderAccessory.setValue(1000);
        MainFrame.add(sliderAccessory, new GridConstraints(6, 1, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(534, 24), null, 0, false));
        sliderEngine = new JSlider();
        sliderEngine.setExtent(0);
        sliderEngine.setFocusTraversalPolicyProvider(false);
        sliderEngine.setForeground(new Color(-4515167));
        sliderEngine.setInheritsPopupMenu(false);
        sliderEngine.setInverted(false);
        sliderEngine.setMajorTickSpacing(500);
        sliderEngine.setMaximum(2000);
        sliderEngine.setMinorTickSpacing(100);
        sliderEngine.setName("name");
        sliderEngine.setOpaque(true);
        sliderEngine.setOrientation(0);
        sliderEngine.setPaintLabels(true);
        sliderEngine.setPaintTicks(true);
        sliderEngine.setPaintTrack(true);
        sliderEngine.setRequestFocusEnabled(true);
        sliderEngine.setSnapToTicks(true);
        sliderEngine.setToolTipText("");
        sliderEngine.setValue(1000);
        sliderEngine.setValueIsAdjusting(false);
        sliderEngine.putClientProperty("Slider.paintThumbArrowShape", Boolean.FALSE);
        MainFrame.add(sliderEngine, new GridConstraints(0, 1, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, 31), null, 0, false));
        sliderBody = new JSlider();
        sliderBody.setForeground(new Color(-11158784));
        sliderBody.setMajorTickSpacing(500);
        sliderBody.setMaximum(2000);
        sliderBody.setMinorTickSpacing(100);
        sliderBody.setPaintLabels(true);
        sliderBody.setPaintTicks(true);
        sliderBody.setSnapToTicks(false);
        sliderBody.setValue(1000);
        sliderBody.setValueIsAdjusting(false);
        MainFrame.add(sliderBody, new GridConstraints(3, 1, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(534, 24), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Engine");
        MainFrame.add(label1, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Body");
        MainFrame.add(label2, new GridConstraints(3, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Accessory");
        MainFrame.add(label3, new GridConstraints(6, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Dealer");
        MainFrame.add(label4, new GridConstraints(9, 0, 3, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sliderDealer = new JSlider();
        sliderDealer.setForeground(new Color(-4482048));
        sliderDealer.setMajorTickSpacing(500);
        sliderDealer.setMaximum(2000);
        sliderDealer.setMinorTickSpacing(100);
        sliderDealer.setPaintLabels(true);
        sliderDealer.setPaintTicks(true);
        sliderDealer.setPaintTrack(true);
        sliderDealer.setSnapToTicks(false);
        sliderDealer.setValue(1000);
        MainFrame.add(sliderDealer, new GridConstraints(9, 1, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(534, 24), null, 0, false));
        final Spacer spacer1 = new Spacer();
        MainFrame.add(spacer1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        MainFrame.add(spacer2, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        MainFrame.add(spacer3, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Storage");
        MainFrame.add(label5, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Amount");
        MainFrame.add(label6, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("Storage");
        MainFrame.add(label7, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("Amount");
        MainFrame.add(label8, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("Storage");
        MainFrame.add(label9, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("Amount");
        MainFrame.add(label10, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label11 = new JLabel();
        label11.setText("Storage");
        MainFrame.add(label11, new GridConstraints(9, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label12 = new JLabel();
        label12.setText("Amount");
        MainFrame.add(label12, new GridConstraints(10, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label13 = new JLabel();
        label13.setText("In queue");
        MainFrame.add(label13, new GridConstraints(11, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        carsInQueue = new JLabel();
        carsInQueue.setText("Label");
        MainFrame.add(carsInQueue, new GridConstraints(11, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        amountCar = new JLabel();
        amountCar.setText("Label");
        MainFrame.add(amountCar, new GridConstraints(10, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        storageCar = new JLabel();
        storageCar.setText("Label");
        MainFrame.add(storageCar, new GridConstraints(9, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        amountAccessory = new JLabel();
        amountAccessory.setText("Label");
        MainFrame.add(amountAccessory, new GridConstraints(7, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        storageAccessory = new JLabel();
        storageAccessory.setText("Label");
        MainFrame.add(storageAccessory, new GridConstraints(6, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        amountBody = new JLabel();
        amountBody.setText("Label");
        MainFrame.add(amountBody, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        storageBody = new JLabel();
        storageBody.setText("Label");
        MainFrame.add(storageBody, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        amountEngine = new JLabel();
        amountEngine.setText("Label");
        MainFrame.add(amountEngine, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        storageEngine = new JLabel();
        storageEngine.setText("Label");
        MainFrame.add(storageEngine, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        MainFrame.add(spacer4, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        MainFrame.add(spacer5, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        MainFrame.add(spacer6, new GridConstraints(8, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        btnStop = new JButton();
        btnStop.setText("Stop");
        MainFrame.add(btnStop, new GridConstraints(12, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainFrame;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    @Override
    public void update() {
        FabricCondition pkg = (FabricCondition) publisher.getInfo();
        storageAccessory.setText(pkg.getAccessoryCurrCapacity() + "\\" + pkg.getAccessoryStorageCapacity());
        storageBody.setText(pkg.getBodyCurrCapacity() + "\\" + pkg.getBodyStorageCapacity());
        storageEngine.setText(pkg.getEngineCurrCapacity() + "\\" + pkg.getEngineStorageCapacity());
        storageCar.setText(pkg.getCarCurrCapacity() + "\\" + pkg.getCarStorageCapacity());
        amountAccessory.setText(String.valueOf(pkg.getAccessoryProductionAmount()));
        amountBody.setText(String.valueOf(pkg.getBodyProductionAmount()));
        amountEngine.setText(String.valueOf(pkg.getEngineProductionAmount()));
        amountCar.setText(String.valueOf(pkg.getCarProductionAmount()));
        carsInQueue.setText(String.valueOf(pkg.getCarInQueue()));
    }
}
